Beauty Bar
------------------------

Project to make bars look nicer.

TODOs
------------------------

<host> = beauty-bar.appspot.com

Upload to google helper (PRIO 1)
--------
+ send only files that are needed: make makefile to produce such suite
+ obfuscate javascript code (and maybe css)
+ static html pages (extrapages) can be generater before upload and stored
  in /static/html/ -folder

Control generators (PRIO 2)
--------
(done some, needs improvement though)
Make generators controllable through UI.
+ change background image
  + color
  + image (clipart vs. upload)
+ preload generator parts
+ "update" button, as now update happens onBlur (should be onblur!!!)
+ make common parameters for all generators
  + font
  + screen color
+ implement generator attribute setters and getters only as a parameter
+ create generator info field on right and add it gui_interface

Write architecture design (PRIO 2)
--------
+ structure of model/view/controller
+ services (svg-to-png, live-data-import, image-store)
+ generator interface
+ database interface
+ database tools for gae
+ hooks for information collection
  - use meter
+ logging?
+ naming conventions / file system
+ use staticmethods? or only classmethods

Tools to process SVG (PRIO 3)
--------
+ extract bars from svg
+ make generator skel based on svg image?
+ mofify svg size?
+ find more tools?! Inkscape is good, but more?

Change to use JQuery library (PRIO 1)
--------
+ Design look-and-feel.
+ refactor all existing javascript code
+ modified fields, onChange: sleep 2 seconds and then do as onBlur

Store images to db (PRIO 5 - POSTPONED)
--------
  + svg to png conversion
   --> tried twice, do not support python tools to make it,
       and Batik (Java) cannot be used as it uses java.awt.
  + make images accessible later on
    (http://<host>/s/<image_name>(.svg|.png)
  + use memcache 

Testing (PRIO 4)
--------
+ test with other browsers
 + opera
 + internet explorer
+ test with many users
+ write test plan
+ write some automate tests to verify that atleast something works
  before upload
+ nosetests? 
 http://somethingaboutorange.com/mrl/projects/nose/0.11.1/
 http://code.google.com/p/bridal/source/browse/trunk/demo/src/demo/tests/__init__.py

Bug fixing (PRIO 3)
--------
+ DB (?) bug: sometimes all generators go active:false
  - this must be caused by many process using same data
    and style paraller. It should be prevented with locks
    + how to implement multiuser system?
    + how about one user (aka. session) with many tabs (or windows)?
  + clicking buttons too fast cause active generator lost
+ Data is not saved with session, but requires "DAO.save(data)"
+ bars can now be larger than scale max - there is no checking for it
  now... do unit tests to cover these cases.
+ attributes should use "default" values, not null values
  - maybe all default values could be saved to somewhere and used from
    there?
+ link to style does not work! do styles work at all?

Different size datasets (PRIO 3)
--------
+ from 2 to 10 bars and can be vary with bar type,
  but needs to be shown in page
+ another dimension

Database improvements (PRIO 4)
--------
+ make database separate tables for saved data, session data, and
  deleted data - or atleast make db attribute for them.

User documentation (PRIO 5)
--------
+ tutorials / docs
  + training video to Youtube (PRIO 4)
+ invent more user scenarios
+ make nice examples

Make more generators (PRIO 3)
--------
+ make default templates for common blogging schemas
+ weather diagram
+ improve current generators...
  + for example none scale data based on scale

Live data sources (PRIO 5)
--------
data sources directly from common sources (e.g. UN free data + stat.fi)
few nice and common examples population development through time
+ do we need separate "data-conversion service for this?"

DAO redo (PRIO 5)
--------
create dao model totally different way: lets do not have DAO mapper
class but instead all dao classes should derive from object class
and we should have IOCs for creating classes

class Data(object):
  def __init__(self):
    self.item_factory = Item
  def set_item_factory(self, item_factory):
    self.item_factory = item_factory
  def add_item(self, name, val):
    self.items.append(eval(self.item_factory)(name, val))

class Item(object):
  pass

class ItemDAO(db.model):
  pass

class mainprog():
  Data.set_item_factory(ItemDAO)


Link list (PRIO 3)
--------
List all interesting links to doc/links.html

Others (PRIO 5)
--------
+ what if corrupted or wrong csv file is sent?
  + other error checking and data security

+ split code (atleast javascript) to two versions: debug, production

+ import from excel, openoffice-calc, google docs (PRIO 5)

+ disable debug more for production server (google cloud)

+ add custom 404 (page missing) and 500 (server error) pages

+ add message db field to session, which is shown when user views
  page next time and can be used to send error messages and infos

+ Database tool to backup database & restore database
  + does google have one already?

+ add statistical (edited) and history (versions) to database (PRIO 4)

+ implement user accounts
 + add user accounting in database

+ check against python coding guidelines: (PRIO 1)

+ fix pages to XHTML compliant (PRIO 2)
  + base.html is fixed, other pages might contain something bad.

+ platform stuff
  + integration to google docs
  + save data with google account

+ move all unneeded files from generators/<name>/ to doc

+ use google analytics

+ logic
  + calculate statistics (PRIO 4)
  + calculate how much processing power is used (PRIO 6 - OPTIMIZATION)
  + export images as service

+ make pychecker and lint rules

+ business plan (PRIO 5)

+ make chart-api caching
  - if same request comes again it should read result from cache

+ internalionalization (PRIO 2)
  + finnish and english
  + flags in top corner?

+ make development version to run offline as well,
  currenty it uses google ajax api

+ add title to charts
+ add name for chart axis

+ make some charts interactive like "http://g.raphaeljs.com/" style
  when user presses "export interactive svg"

+ open source to github?

+ make "clean" button to datapage which set all data to "" & 0

Required skills
------------------------
  + marketing   - to get users
  + statistics  - to help to modify data
  + data mining - to create "default" graph pictures
  + graphical   - to make bars nicer & page nicer
  + programming - to code more flexible architecture

Dependencies
------------------------

Prototype.js
SVGWeb
SVGFig
Google App Engine / Python
(Inkscape)
py.test (python-codespeak-lib)
epydoc (python-epydoc)
dia
git
bash
jso
